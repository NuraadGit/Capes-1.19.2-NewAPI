buildscript {
    dependencies {
        classpath("org.kohsuke:github-api:1.313")
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jetbrains.kotlin.jvm"
    id "org.ajoberstar.grgit"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true

        mixinConfig "capes-common.mixins.json"
        mixinConfig "capes-forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    modImplementation "thedarkcolour:kotlinforforge:${forge_kotlin_version}"

    annotationProcessor(shadowCommon("com.github.LlamaLad7:MixinExtras:${mixinextras_version}"))
    implementation("com.github.LlamaLad7:MixinExtras:${mixinextras_version}")
    forgeRuntimeLibrary("com.github.LlamaLad7:MixinExtras:${mixinextras_version}")

//    modImplementation "com.ptsmods:devlogin:3.1.1"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    relocate 'com.llamalad7.mixinextras', 'me.cael.capes.shaded.com.llamalad7.mixinextras'

    mergeServiceFiles()

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"

    from rootProject.file("LICENSE")
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def DISPLAY_NAME = "[Forge ${minecraft_version}] Capes ${mod_version.split('\\+')[0]}"

static def getChangeLog() {
    return "A changelog can be found at https://github.com/CaelTheColher/Capes"
}

def getBranch() {
    def env = System.getenv()
    if (env.GITHUB_REF) {
        def branch = env.GITHUB_REF
        return branch.substring(branch.lastIndexOf("/") + 1)
    }

    if (grgit == null) {
        return "unknown"
    }

    def branch = grgit.branch.current().name
    return branch.substring(branch.lastIndexOf("/") + 1)
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

tasks.register('github') {
    dependsOn remapJar
    def env = System.getenv()
    onlyIf {
        env.GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
        def repository = github.getRepository(env.GITHUB_REPOSITORY)

        def releaseBuilder = new GHReleaseBuilder(repository, "forge-" + version as String)
        releaseBuilder.name(DISPLAY_NAME)
        releaseBuilder.body(getChangeLog())
        releaseBuilder.commitish(getBranch())

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(tasks.remapJar.archiveFile.get().getAsFile(), "application/java-archive")
    }
}

rootProject.tasks.named("modPublish").get().dependsOn tasks.named("github").get()
